package sender

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/pdfcpu/pdfcpu/pkg/api"
	"github.com/tiaguinho/gosoap"
)

func SendTestMessage() error {
	endpoint := "http://localhost:8081/soap" // –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL

	// HTTP-–∫–ª–∏–µ–Ω—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	transport := &http.Transport{}
	clientWithLogging := &http.Client{
		Transport: loggingRoundTripper{transport},
		Timeout:   30 * time.Second,
	}

	client, err := gosoap.SoapClient(endpoint, clientWithLogging)
	if err != nil {
		return err
	}

	// –ß—Ç–µ–Ω–∏–µ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ pdf
	pdfPath := "test.pdf"
	pdfBytes, err := os.ReadFile(pdfPath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: %v", err)
	}
	pdfBase64 := base64.StdEncoding.EncodeToString(pdfBytes)

	// –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
	pageCount, err := api.PageCount(bytes.NewReader(pdfBytes), nil)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü PDF: %v", err)
	}

	// SOAP-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	params := gosoap.Params{
		"RPOInfo": map[string]interface{}{
			"PackageCode":    "UUID-123",
			"SenderID":       123,
			"SenderPass":     "password",
			"DocumentID":     "DOC-456",
			"F1":             "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
			"F2":             "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10",
			"F3":             "–ê–ª–º–∞—Ç—ã",
			"F4":             "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è",
			"F5":             "050000",
			"F6":             "–û–û–û –†–æ–º–∞—à–∫–∞",
			"F7":             "—É–ª. –õ–µ–Ω–∏–Ω–∞, 5",
			"F25":            "R200",
			"PageCount":      pageCount,
			"FileAttachment": pdfBase64,
		},
	}

	// XML-–ø—Ä–æ—Å–º–æ—Ç—Ä
	xmlPreview, _ := xml.MarshalIndent(params, "", "  ")
	fmt.Println("üßæ XML Body:")
	fmt.Println(string(xmlPreview))

	// –û—Ç–ø—Ä–∞–≤–∫–∞
	res, err := client.Call("SendRPO", params)
	if err != nil {
		return err
	}

	log.Printf("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: %+v", res)
	return nil
}

// –õ–æ–≥–∏—Ä—É—é—â–∏–π RoundTripper
type loggingRoundTripper struct {
	rt http.RoundTripper
}

func (l loggingRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
	var buf bytes.Buffer
	req.Body = ioutil.NopCloser(io.TeeReader(req.Body, &buf))

	fmt.Println("üì§ RAW SOAP-–∑–∞–ø—Ä–æ—Å:")
	fmt.Println(buf.String())

	resp, err := l.rt.RoundTrip(req)
	if err != nil {
		return nil, err
	}

	respBody, _ := ioutil.ReadAll(resp.Body)
	fmt.Println("üì• RAW SOAP-–æ—Ç–≤–µ—Ç:")
	fmt.Println(string(respBody))

	resp.Body = ioutil.NopCloser(bytes.NewBuffer(respBody))
	return resp, nil
}
